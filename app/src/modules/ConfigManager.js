const fs = require('fs-extra');
const path = require('path');

class ConfigManager {
    constructor() {
        this.serverPath = null;
        this.configCache = {};
    }

    setServerPath(serverPath) {
        this.serverPath = serverPath;
    }

    async getServerConfig() {
        try {
            if (!this.serverPath) {
                return { success: false, error: 'Nenhuma pasta do servidor selecionada' };
            }

            const configPath = path.join(this.serverPath, 'server.properties');
            
            if (!await fs.pathExists(configPath)) {
                return { success: false, error: 'Arquivo server.properties não encontrado' };
            }

            const configContent = await fs.readFile(configPath, 'utf8');
            const config = this.parseProperties(configContent);
            
            this.configCache = config;

            return {
                success: true,
                config: config
            };
        } catch (error) {
            return {
                success: false,
                error: `Erro ao carregar configurações: ${error.message}`
            };
        }
    }

    async saveServerConfig(config) {
        try {
            if (!this.serverPath) {
                return { success: false, error: 'Nenhuma pasta do servidor selecionada' };
            }

            const configPath = path.join(this.serverPath, 'server.properties');
            const configContent = this.stringifyProperties(config);
            
            // Fazer backup do arquivo atual
            if (await fs.pathExists(configPath)) {
                const backupPath = `${configPath}.backup.${Date.now()}`;
                await fs.copy(configPath, backupPath);
            }

            await fs.writeFile(configPath, configContent, 'utf8');
            this.configCache = config;

            return {
                success: true,
                message: 'Configurações salvas com sucesso'
            };
        } catch (error) {
            return {
                success: false,
                error: `Erro ao salvar configurações: ${error.message}`
            };
        }
    }

    async loadServerConfig() {
        return await this.getServerConfig();
    }

    parseProperties(content) {
        const config = {};
        const lines = content.split('\n');

        for (const line of lines) {
            const trimmed = line.trim();
            
            // Ignorar comentários e linhas vazias
            if (trimmed.startsWith('#') || trimmed === '') {
                continue;
            }

            const equalIndex = trimmed.indexOf('=');
            if (equalIndex === -1) {
                continue;
            }

            const key = trimmed.substring(0, equalIndex).trim();
            const value = trimmed.substring(equalIndex + 1).trim();

            // Converter tipos apropriados
            if (value === 'true' || value === 'false') {
                config[key] = value === 'true';
            } else if (!isNaN(value) && value !== '') {
                config[key] = parseInt(value);
            } else {
                config[key] = value;
            }
        }

        return config;
    }

    stringifyProperties(config) {
        let content = '# Minecraft Bedrock Server Configuration\n';
        content += `# Generated by Minecraft Bedrock Panel at ${new Date().toISOString()}\n\n`;

        // Ordem das configurações para melhor organização
        const configOrder = [
            'server-name',
            'gamemode',
            'force-gamemode',
            'difficulty',
            'allow-cheats',
            'max-players',
            'online-mode',
            'allow-list',
            'server-port',
            'server-portv6',
            'view-distance',
            'tick-distance',
            'player-idle-timeout',
            'max-threads',
            'level-name',
            'level-seed',
            'default-player-permission-level',
            'texturepack-required',
            'content-log-file-enabled',
            'compression-threshold',
            'server-authoritative-movement',
            'player-movement-score-threshold',
            'player-movement-action-direction-threshold',
            'player-movement-distance-threshold',
            'player-movement-duration-threshold-in-ms',
            'correct-player-movement'
        ];

        // Adicionar configurações na ordem especificada
        for (const key of configOrder) {
            if (config.hasOwnProperty(key)) {
                content += `${key}=${config[key]}\n`;
            }
        }

        // Adicionar configurações restantes
        for (const [key, value] of Object.entries(config)) {
            if (!configOrder.includes(key)) {
                content += `${key}=${value}\n`;
            }
        }

        return content;
    }

    getDefaultConfig() {
        return {
            'server-name': 'Dedicated Server',
            'gamemode': 'survival',
            'force-gamemode': false,
            'difficulty': 'easy',
            'allow-cheats': false,
            'max-players': 10,
            'online-mode': true,
            'allow-list': false,
            'server-port': 19132,
            'server-portv6': 19133,
            'view-distance': 32,
            'tick-distance': 4,
            'player-idle-timeout': 30,
            'max-threads': 8,
            'level-name': 'Bedrock level',
            'level-seed': '',
            'default-player-permission-level': 'member',
            'texturepack-required': false,
            'content-log-file-enabled': false,
            'compression-threshold': 1,
            'server-authoritative-movement': 'server-auth',
            'player-movement-score-threshold': 20,
            'player-movement-action-direction-threshold': 0.85,
            'player-movement-distance-threshold': 0.3,
            'player-movement-duration-threshold-in-ms': 500,
            'correct-player-movement': false
        };
    }
}

module.exports = ConfigManager;